version: '3.8'

services:
  # Spring Boot
  backend:
    image: backend
    container_name: 'cloud-storage-server'
    build:
      context: StorageFile-main/Cloud
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/Cloud
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_PROFILES_ACTIVE: "docker"
    volumes:
      - ./logs:/logs
    networks:
      - cloud-network
    depends_on:
      postgres:
        condition: service_healthy

  # Node.js
  frontend:
    build:
      context: ./netology-diplom-frontend
      dockerfile: Dockerfile
    container_name: 'cloud-storage-frontend'
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
    networks:
      - cloud-network
    depends_on:
      - backend
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:13-alpine
    container_name: 'cloud-storage-db'
    environment:
      POSTGRES_DB: Cloud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:

networks:
  cloud-network:
    driver: bridge